/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutFindImport } from './routes/_layout/find'
import { Route as LayoutExploreImport } from './routes/_layout/explore'
import { Route as LayoutCreateImport } from './routes/_layout/create'
import { Route as LayoutArchiveImport } from './routes/_layout/archive'
import { Route as LayoutUserUserSerIdImport } from './routes/_layout/user.$userSerId'
import { Route as LayoutPostPostSerIdImport } from './routes/_layout/post.$postSerId'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutFindRoute = LayoutFindImport.update({
  id: '/find',
  path: '/find',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutExploreRoute = LayoutExploreImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutCreateRoute = LayoutCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutArchiveRoute = LayoutArchiveImport.update({
  id: '/archive',
  path: '/archive',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutUserUserSerIdRoute = LayoutUserUserSerIdImport.update({
  id: '/user/$userSerId',
  path: '/user/$userSerId',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPostPostSerIdRoute = LayoutPostPostSerIdImport.update({
  id: '/post/$postSerId',
  path: '/post/$postSerId',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_layout/archive': {
      id: '/_layout/archive'
      path: '/archive'
      fullPath: '/archive'
      preLoaderRoute: typeof LayoutArchiveImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/create': {
      id: '/_layout/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof LayoutCreateImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/explore': {
      id: '/_layout/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof LayoutExploreImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/find': {
      id: '/_layout/find'
      path: '/find'
      fullPath: '/find'
      preLoaderRoute: typeof LayoutFindImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/post/$postSerId': {
      id: '/_layout/post/$postSerId'
      path: '/post/$postSerId'
      fullPath: '/post/$postSerId'
      preLoaderRoute: typeof LayoutPostPostSerIdImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/user/$userSerId': {
      id: '/_layout/user/$userSerId'
      path: '/user/$userSerId'
      fullPath: '/user/$userSerId'
      preLoaderRoute: typeof LayoutUserUserSerIdImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutArchiveRoute: typeof LayoutArchiveRoute
  LayoutCreateRoute: typeof LayoutCreateRoute
  LayoutExploreRoute: typeof LayoutExploreRoute
  LayoutFindRoute: typeof LayoutFindRoute
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutPostPostSerIdRoute: typeof LayoutPostPostSerIdRoute
  LayoutUserUserSerIdRoute: typeof LayoutUserUserSerIdRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutArchiveRoute: LayoutArchiveRoute,
  LayoutCreateRoute: LayoutCreateRoute,
  LayoutExploreRoute: LayoutExploreRoute,
  LayoutFindRoute: LayoutFindRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutPostPostSerIdRoute: LayoutPostPostSerIdRoute,
  LayoutUserUserSerIdRoute: LayoutUserUserSerIdRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/archive': typeof LayoutArchiveRoute
  '/create': typeof LayoutCreateRoute
  '/explore': typeof LayoutExploreRoute
  '/find': typeof LayoutFindRoute
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
  '/post/$postSerId': typeof LayoutPostPostSerIdRoute
  '/user/$userSerId': typeof LayoutUserUserSerIdRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/archive': typeof LayoutArchiveRoute
  '/create': typeof LayoutCreateRoute
  '/explore': typeof LayoutExploreRoute
  '/find': typeof LayoutFindRoute
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
  '/post/$postSerId': typeof LayoutPostPostSerIdRoute
  '/user/$userSerId': typeof LayoutUserUserSerIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/_layout/archive': typeof LayoutArchiveRoute
  '/_layout/create': typeof LayoutCreateRoute
  '/_layout/explore': typeof LayoutExploreRoute
  '/_layout/find': typeof LayoutFindRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/post/$postSerId': typeof LayoutPostPostSerIdRoute
  '/_layout/user/$userSerId': typeof LayoutUserUserSerIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/signup'
    | '/archive'
    | '/create'
    | '/explore'
    | '/find'
    | '/settings'
    | '/'
    | '/post/$postSerId'
    | '/user/$userSerId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/signup'
    | '/archive'
    | '/create'
    | '/explore'
    | '/find'
    | '/settings'
    | '/'
    | '/post/$postSerId'
    | '/user/$userSerId'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/signup'
    | '/_layout/archive'
    | '/_layout/create'
    | '/_layout/explore'
    | '/_layout/find'
    | '/_layout/settings'
    | '/_layout/'
    | '/_layout/post/$postSerId'
    | '/_layout/user/$userSerId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/login",
        "/signup"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/archive",
        "/_layout/create",
        "/_layout/explore",
        "/_layout/find",
        "/_layout/settings",
        "/_layout/",
        "/_layout/post/$postSerId",
        "/_layout/user/$userSerId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_layout/archive": {
      "filePath": "_layout/archive.tsx",
      "parent": "/_layout"
    },
    "/_layout/create": {
      "filePath": "_layout/create.tsx",
      "parent": "/_layout"
    },
    "/_layout/explore": {
      "filePath": "_layout/explore.tsx",
      "parent": "/_layout"
    },
    "/_layout/find": {
      "filePath": "_layout/find.tsx",
      "parent": "/_layout"
    },
    "/_layout/settings": {
      "filePath": "_layout/settings.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/post/$postSerId": {
      "filePath": "_layout/post.$postSerId.tsx",
      "parent": "/_layout"
    },
    "/_layout/user/$userSerId": {
      "filePath": "_layout/user.$userSerId.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
